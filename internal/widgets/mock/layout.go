// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/negrel/paon/internal/widgets (interfaces: Layout)

// Package mock_widgets is a generated GoMock package.
package mock_widgets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	widgets "github.com/negrel/paon/internal/widgets"
)

// MockLayout is a mock of Layout interface.
type MockLayout struct {
	ctrl     *gomock.Controller
	recorder *MockLayoutMockRecorder
}

// MockLayoutMockRecorder is the mock recorder for MockLayout.
type MockLayoutMockRecorder struct {
	mock *MockLayout
}

// NewMockLayout creates a new mock instance.
func NewMockLayout(ctrl *gomock.Controller) *MockLayout {
	mock := &MockLayout{ctrl: ctrl}
	mock.recorder = &MockLayoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLayout) EXPECT() *MockLayoutMockRecorder {
	return m.recorder
}

// AppendChild mocks base method.
func (m *MockLayout) AppendChild(arg0 widgets.Widget) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendChild", arg0)
}

// AppendChild indicates an expected call of AppendChild.
func (mr *MockLayoutMockRecorder) AppendChild(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendChild", reflect.TypeOf((*MockLayout)(nil).AppendChild), arg0)
}

// IndexOf mocks base method.
func (m *MockLayout) IndexOf(arg0 widgets.Widget) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexOf", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// IndexOf indicates an expected call of IndexOf.
func (mr *MockLayoutMockRecorder) IndexOf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexOf", reflect.TypeOf((*MockLayout)(nil).IndexOf), arg0)
}

// Name mocks base method.
func (m *MockLayout) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLayoutMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLayout)(nil).Name))
}

// Parent mocks base method.
func (m *MockLayout) Parent() widgets.Layout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(widgets.Layout)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockLayoutMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockLayout)(nil).Parent))
}

// RemoveChild mocks base method.
func (m *MockLayout) RemoveChild(arg0 widgets.Widget) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveChild", arg0)
}

// RemoveChild indicates an expected call of RemoveChild.
func (mr *MockLayoutMockRecorder) RemoveChild(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChild", reflect.TypeOf((*MockLayout)(nil).RemoveChild), arg0)
}

// build mocks base method.
func (m *MockLayout) build(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "build", arg0)
}

// build indicates an expected call of build.
func (mr *MockLayoutMockRecorder) build(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "build", reflect.TypeOf((*MockLayout)(nil).build), arg0)
}

// setParent mocks base method.
func (m *MockLayout) setParent(arg0 widgets.Layout) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setParent", arg0)
}

// setParent indicates an expected call of setParent.
func (mr *MockLayoutMockRecorder) setParent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setParent", reflect.TypeOf((*MockLayout)(nil).setParent), arg0)
}
