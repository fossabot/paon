// Code generated by MockGen. DO NOT EDIT.
// Source: ./widget.go

// Package mock_widgets is a generated GoMock package.
package mock_widgets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	widgets "github.com/negrel/paon/internal/widgets"
)

// MockWidget is a mock of Widget interface.
type MockWidget struct {
	ctrl     *gomock.Controller
	recorder *MockWidgetMockRecorder
}

// MockWidgetMockRecorder is the mock recorder for MockWidget.
type MockWidgetMockRecorder struct {
	mock *MockWidget
}

// NewMockWidget creates a new mock instance.
func NewMockWidget(ctrl *gomock.Controller) *MockWidget {
	mock := &MockWidget{ctrl: ctrl}
	mock.recorder = &MockWidgetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWidget) EXPECT() *MockWidgetMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockWidget) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWidgetMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWidget)(nil).Name))
}

// Parent mocks base method.
func (m *MockWidget) Parent() widgets.Layout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(widgets.Layout)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockWidgetMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockWidget)(nil).Parent))
}

// setParent mocks base method.
func (m *MockWidget) setParent(parent widgets.Layout) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setParent", parent)
}

// setParent indicates an expected call of setParent.
func (mr *MockWidgetMockRecorder) setParent(parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setParent", reflect.TypeOf((*MockWidget)(nil).setParent), parent)
}

// build mocks base method.
func (m *MockWidget) build(ctx interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "build", ctx)
}

// build indicates an expected call of build.
func (mr *MockWidgetMockRecorder) build(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "build", reflect.TypeOf((*MockWidget)(nil).build), ctx)
}
